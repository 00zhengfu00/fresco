import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${ANDROID_GRADLE_PLUGIN_VERSION}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${GRADLE_BINTRAY_PLUGIN_VERSION}"
        classpath "com.github.dcendents:android-maven-gradle-plugin:${ANDROID_MAVEN_GRADLE_PLUGIN_VERSION}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "de.undercouch.download" version "3.1.2"
}

project.ext {
    buildToolsVersion = "${BUILD_TOOLS_VERSION}"
    compileSdkVersion = COMPILE_SDK_VERSION.toInteger()
    minSdkVersion = MIN_SDK_VERSION;
    targetSdkVersion = TARGET_SDK_VERSION;
    preDexLibs = !project.hasProperty('disablePreDex');
}

subprojects {

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    task allclean {
    }

    afterEvaluate { project ->
      allclean.dependsOn(project.tasks.matching {it.name == 'clean'})

        if (project.tasks.matching { it.name == 'assembleRelease'}) {
            def jarList = new ArrayList()
            task setJarList(dependsOn: assembleRelease) << {
                configurations.compile.each {
                    jarList.add(it)
                }
            }

            task copyDeps(dependsOn: setJarList, type: Copy) {
                from jarList
                into 'build/external'
            }
        }
    }

    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    apply plugin: 'de.undercouch.download'

    ext.getNdkBuildName =  {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            return "ndk-build.cmd"
        } else {
            return "ndk-build"
        }
    }

    ext.getNdkBuildFullPath = { Project project ->
        File propFile = project.rootProject.file('local.properties')
        if (!propFile.exists()) {
            return getNdkBuildName()
        }
        Properties properties = new Properties()
        properties.load(propFile.newDataInputStream())
        def ndkCommand = properties.getProperty('ndk.command')
        if (ndkCommand != null) {
            return ndkCommand
        }
        def path = null
        def ndkPath = properties.getProperty('ndk.path')
        if (ndkPath != null) {
            path = ndkPath
        } else {
            def ndkDir = properties.getProperty('ndk.dir')
            if (ndkDir != null) {
                path = ndkDir
            }
        }
        if (path != null) {
            if (!path.endsWith(File.separator)) {
                path += File.separator
            }
            return path + getNdkBuildName()
        } else {
            // if none of above is provided, we assume ndk-build is already in $PATH
            return getNdkBuildName()
        }
    }

    ext.nativeDepsDir = new File("${projectDir}/nativedeps")
    ext.downloadsDir = new File("${nativeDepsDir}/downloads")
    ext.mergeDir = new File("${nativeDepsDir}/merge")

    task createNativeDepsDirectories {
        nativeDepsDir.mkdirs()
        downloadsDir.mkdirs()
        mergeDir.mkdirs()
    }

    task downloadLibjpeg(dependsOn: createNativeDepsDirectories, type: Download) {
        src 'https://github.com/libjpeg-turbo/libjpeg-turbo/archive/1.5.0.tar.gz'
        onlyIfNewer true
        overwrite false
        dest downloadsDir
    }

    task unpackLibjpeg(dependsOn: downloadLibjpeg, type: Copy) {
        from tarTree(resources.gzip("${downloadLibjpeg.dest}/1.5.0.tar.gz"))
        into "${downloadsDir}/libjpeg"
    }

    task copyLibjpeg(dependsOn: unpackLibjpeg, type: Copy) {
        from "${unpackLibjpeg.destinationDir}/libjpeg-turbo-1.5.0"
        from 'src/main/jni/third-party/libjpeg-turbo-1.5.x'
        include('**/*.c', '**/*.h','**/*.S', '**/*.asm', '**/*.inc', '*.mk')
        into "${mergeDir}/libjpeg-turbo-1.5.x"
    }
}

repositories {
}
